highcommand(3) -- getopt() for the future
=========================================

## SYNOPSIS

`#include <hc.h>`

 - `void` `struct hc_opt`(`char` \*<short\_name>, `char` \*<long\_name>, `char` \*<help\_text>);
 - `struct hc_results` `hc_run`(`int` <argc>, `char` \*<argv>[]);
 - `struct hc_results` `hc_get_results`();
 - `void` `hc_cleanup`();
 - `int` `hc_is_present`(`char` \*<long\_name>);
 - `int` `hc_has_value`(`char` \*<long\_name>);
 - `char` \*`hc_get_value`(`char` \*<long\_name>);
 - `int` `hc_get_level`(`char` \*<long\_name>);

## DESCRIPTION

The `struct hc_opt`() function defines an option that will be used by `hc_run()` to
determine how to parse the options internally.  <short\_name> and <long\_name>
are the values searched for by `hc_run`(), while <help\_text> is used
internally to generate output for `-h`|`--help`.  Additionally, <long\_name>
is also used when retrieving values from the `struct hc_results` object.  All three
arguments are required to be present and non-`NULL`.  If an option would
require an argument, append '=' to both <short\_name> and <long\_name>.  If an
option would optionally require an argument instead, append '=?' instead.

The `hc_run`() function parses a given vector of arguments, based on the
options defined using `struct hc_opt`().  It's arguments, <argc> and <argv> can be
any count/vector combination, but the arguments from `main`() work just fine.
Internally, `getopt_long`(3) is used to parse the arguments, with a couple of
caveats.  Notably, the literal '--' __always__ signifies the end of option
parsing, even if it would be a valid argument for an option, meaning that '--'
will __never__ be an argument for an option.  Additionally, options with
optional arguments will always try to find a valid argument.  `hc_run`() is
fairly smart about handling unknown options or missing required arguments, and
will print out a semi-descriptive message.

The `hc_get_results`() function returns the same `struct hc_results` object that
`hc_run`() returns, but only if `hc_run`() has ran.  If not, an empty
`struct hc_results` object is returned instead.

The `hc_cleanup`() function cleans up all the data produced by `struct hc_opt`()
calls and `hc_run`().  Make sure to call this if you don't want memory
leaks in your program.  Additionally, this will reset the internal state,
which resets all options, allowing you to define new options with `struct hc_opt`(),
and call `hc_run`() with different arguments.

The functions `hc_is_present`, `hc_has_value`, `hc_get_value`, and
`hc_get_level` are all used to grab the values of the options after `hc_run`()
has been called.  This allows for retrieval of user-passed values without
having to access the `struct hc_results` object returned by `hc_run`() or
`hc_get_results`().

## RETURN VALUE

There are 2 different types that are returned by `hc_run`() and
`hc_get_results`(): The `struct hc_results` object, and the `struct hc_option` object.  The
latter is included only as an array of of the former.  These objects are
`typedef`'d structs.

    struct hc_results {
        char *name;
        struct hc_option *options;
        int count;
        int argc;
        char **argv;
    };

    struct hc_option {
        char *short_name;
        char *long_name;
        char *help_text;
        int has_argument;
        int is_present;
        int has_value;
        char *value;
        int level;
    };

Please note that the `count` field of the `struct hc_results` object is the size of
the `options` array, and the the `has_argument` field of the `struct hc_option`
argument indicates whether the option has an associated required (1),
optional (2), or no (0) argument.

## NOTES

`hc_run`() __will__ permute the original <argv> argument so that all non-option
values are at the end.  See `getopt`(3) for more information.

Additionally, strings in the `struct hc_results` object (which include the <argv>
array as well as the values of each `struct hc_option`) will not be modified or freed
until `hc_cleanup`() is called, and as such, are available to use without
needing to be copied (such as by `strdup`(3)) and then subsequently freed.

While git-style commands are supported, nesting commands is not supported by
the interface described in this manpage.  Any attempt to nest commands below
the first level will fail and probably crash your program horribly.

If you desire more fine-grained control over your options/commands, including
nesting commands infinitely deeply, there are some other public functions
declared in `<hc.h>`.  These functions enable a much more control over the
option declaring and parsing process, and though they are available, they are
recommended only for users who understand how they work and why they are
useful.  Additionally, these functions are not officially supported AT ALL by
me (the developer) The functions outlined in the manual should be sufficient
for almost all use cases.  Users who desire assistance using these functions
should request it at the email listed below (which I will reply to at my own
discretion).

## EXAMPLE

An extremely basic example of the features of `highcommand`.

    #include <hc.h>
    #include <stdio.h>

    int main(int argc, char *argv[]) {
        struct hc_opt("h",   "help",    "show this message");
        struct hc_opt("v",   "verbose", "verbosity (use multiple times)");
        struct hc_opt("n=",  "name=",   "your name");
        struct hc_opt("o=?", "opt=?",   "optional arguments");

        struct hc_results results = hc_run(argc, argv);

        if (hc_is_present("help")) {
            // display help
            printf("How to get this message: %s --help\n", results.name);
        }

        printf("Verbosity level set to %d\n", hc_get_level("verbose"));

        if (hc_has_value("name")) {
            printf("Hello %s\n", hc_get_value("name"));
        }

        if (hc_is_present("opt")) {
            if (hc_has_value("opt")) {
                printf("'%s' was the optional value\n", hc_get_value("opt"));
            } else {
                printf("No optional value was given\n");
            }
        }

        if (results.argc > 0) {
            printf("Remaining arguments:\n");
            for (int i = 0; i < results.argc; i++) {
                printf("  %s\n", results.argv[i]);
            };
        }

        hc_cleanup();

        return 0;
    }

## BUGS

Undoubtedly.  Report or discuss them at:

    https://github.com/dlom/highcommand/issues

## AUTHOR

Mark Old (<https://github.com/dlom>)

## SEE ALSO

`getopt`(3), `getopt_long`(3)
